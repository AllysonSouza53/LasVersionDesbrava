//front.kv
MDScreenManager:
    TelaEscolha:
        name: "Escolha"
    TelaLoginAluno:
        name: "LoginAluno"
    TelaLoginProfissional:
        name:"LoginProfissional"
    TelaCadastroProfissional1:
        name:"CadastroProfissional1"
    TelaPerfilProfissional:
        name:"PerfilProfissional"
    TelaCadastroProfissional2:
        name:"CadastroProfissional2"

<TelaLoginAluno@MDScreen>:
    MDFloatLayout:
        canvas.before:
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Fundo.png'
                size: self.size
                pos: self.pos

            Color:
                rgba: 0, 0, 0, 0.5
            RoundedRectangle:
                size: self.width * 0.3, self.height * 0.4
                pos: self.center_x - self.width * -0.15, self.center_y - self.height * 0.07
                radius: [20]

        canvas:
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Logo.png'
                size: 150, 150
                pos: self.center_x - self.width * 0.48, self.center_y - self.height * -0.27

        MDRectangleFlatIconButton:
            text: "Voltar"
            icon: "arrow-left"
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            on_release: app.irEscolha()
            size_hint: None, None
            size: "200dp", "50dp"
            pos_hint: {"right": 0.98, "top": 0.98}
            text_color: 1, 1, 1, 1
            icon_color: 1, 1, 1, 1
            line_color: 1, 1, 1, 1

        MDLabel:
            text:'Bem Vindo, Aluno!'
            color:1,1,1,1
            font_size: "24sp"
            bold: True
            pos_hint: {'center_x': 1.24, 'center_y': 0.8}

        MDLabel:
            text:'Nome:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 1.18, 'center_y': 0.732}

        MDTextField:
            hint_text: "Digite Seu Nome"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.8, 'center_y':0.7}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDLabel:
            text:'RA:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 1.18, 'center_y': 0.632}

        MDTextField:
            hint_text: "Digite seu Registro do Aluno"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.8, 'center_y':0.6}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDRaisedButton:
            text: 'Entrar'
            pos_hint: {'center_x': 0.8, 'center_y': 0.5}
            size_hint_x: 0.06
            size_hint_y: 0.06
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            on_release: app.irLoginProfissional()
            line_color: 1, 1, 1, 1

<TelaCadastroProfissional1@MDScreen>:
    MDFloatLayout:
        canvas.before:
            # Desenha o fundo
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Fundo.png'
                size: self.size
                pos: self.pos

            # Desenha o retângulo com bordas arredondadas
            Color:
                rgba: 0, 0, 0, 0.5
            RoundedRectangle:
                size: self.width * 0.3, self.height * 0.6
                pos: self.center_x - self.width * 0.15, self.center_y - self.height * 0.30
                radius: [20]

        canvas:
            # Desenha o logo
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Logo.png'
                size: 150, 150
                pos: self.center_x - self.width * 0.48, self.center_y - self.height * -0.27

        MDRectangleFlatIconButton:
            text: "Voltar"
            icon: "arrow-left"
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            on_release: app.irEscolha()
            size_hint: None, None
            size: "200dp", "50dp"
            pos_hint: {"right": 0.98, "top": 0.98}
            text_color: 1, 1, 1, 1
            icon_color: 1, 1, 1, 1
            line_color: 1, 1, 1, 1

        MDLabel:
            text:'Cadastre-se um Profissional!'
            color:1,1,1,1
            font_size: "24sp"
            bold: True
            pos_hint: {'center_x': 0.92, 'center_y': 0.76}

        MDLabel:
            text:'CPF:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.7}

        MDTextField:
            id: lbl_CPFCadastroProfissional
            hint_text: "Digite seu CPF"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.668}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1
            on_text: app.formatar_cpf(self)

        MDLabel:
            text:'Nome Completo:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.6}

        MDTextField:
            id: lbl_NomeCadastroProfissional
            hint_text: "Digite seu Nome Completo"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.568}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDLabel:
            text:'Usuario:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.5}

        MDTextField:
            id: lbl_UsuarioCadastroProfissional
            hint_text: "Digite seu Usuario"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.468}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDLabel:
            text:'Profissão:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.4}

        MDTextField:
            id: List_ProfissoesText
            hint_text: "Selecione uma Profissão"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.368}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1
            on_focus:app.ListaProfissõesText_Click(self, self.focus)

        MDDropDownItem:
            id: List_ProfissoesBotao
            pos_hint: {"center_x": 0.61, "center_y": 0.368}
            on_release: app.ListaProfissõesBotao_Click(self)

        MDRaisedButton:
            text: 'Já tem conta! Conecte-se'
            pos_hint: {'center_x': 0.5, 'center_y': 0.25}
            size_hint_x: 0.06
            size_hint_y: 0.06
            md_bg_color: 0, 0, 0, 0
            font_size: "12sp"
            on_release: app.irLoginProfissional()

        MDRaisedButton:
            text: 'Continuar'
            pos_hint: {'center_x': 0.5, 'center_y': 0.3}
            size_hint_x: 0.06
            size_hint_y: 0.06
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            on_release: app.irCadastroProfissional2()
            line_color: 1, 1, 1, 1

<TelaCadastroProfissional2@MDScreen>:
    MDFloatLayout:
        canvas.before:
            # Desenha o fundo
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Fundo.png'
                size: self.size
                pos: self.pos

            # Desenha o retângulo com bordas arredondadas
            Color:
                rgba: 0, 0, 0, 0.5
            RoundedRectangle:
                size: self.width * 0.3, self.height * 0.68
                pos: self.center_x - self.width * 0.15, self.center_y - self.height * 0.38
                radius: [20]

        canvas:
            # Desenha o logo
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Logo.png'
                size: 150, 150
                pos: self.center_x - self.width * 0.48, self.center_y - self.height * -0.27

        MDRectangleFlatIconButton:
            text: "Voltar"
            icon: "arrow-left"
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            on_release: app.irEscolha()
            size_hint: None, None
            size: "200dp", "50dp"
            pos_hint: {"right": 0.98, "top": 0.98}
            text_color: 1, 1, 1, 1
            icon_color: 1, 1, 1, 1
            line_color: 1, 1, 1, 1

        MDLabel:
            text:'Está quase acabando!'
            color:1,1,1,1
            font_size: "24sp"
            bold: True
            pos_hint: {'center_x': 0.92, 'center_y': 0.76}

        MDLabel:
            text:'Escola:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.5}

        MDTextField:
            id: List_EscolasText
            hint_text: "Selecione uma Escola"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.468}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1
            on_focus:app.ListaEscolasText_Click(self, self.focus)

        MDDropDownItem:
            id: List_EscolasBotao
            pos_hint: {"center_x": 0.61, "center_y": 0.468}
            on_release: app.ListaEscolasBotao_Click(self)

        MDLabel:
            text:'Cidade:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.6}

        MDTextField:
            id: List_CidadesText
            hint_text: "Selecione uma Cidade"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.568}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1
            on_focus:app.ListaCidadesText_Click(self, self.focus)

        MDDropDownItem:
            id: List_CidadeBotao
            pos_hint: {"center_x": 0.61, "center_y": 0.568}
            on_release:app.ListaCidadesBotao_Click(self)

        MDLabel:
            text:'Estado(UF):'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.7}

        MDTextField:
            id: List_UFText
            hint_text: "Selecione um Estado(UF)"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.668}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1
            on_focus:app.ListaUFText_Click(self, self.focus)

        MDDropDownItem:
            id: List_UFBotao
            pos_hint: {"center_x": 0.61, "center_y": 0.668}
            on_release: app.ListaUFBotao_Click(self)

        MDLabel:
            text:'Senha:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.4}

        MDTextField:
            id: lbl_SenhaProfissional
            hint_text: "Crie uma senha"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.368}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDLabel:
            text:'Confirmar senha:'
            color:1,1,1,1
            font_size: "16sp"
            bold: True
            pos_hint: {'center_x': 0.88, 'center_y': 0.3}

        MDTextField:
            id: lbl_ConfirmarSenhaProfissional
            hint_text: "Confirme sua senha"
            mode: "round"
            size_hint_x: 0.25
            pos_hint: {"center_x":0.5, 'center_y':0.268}
            line_color_normal: 0, 0, 0, 0.5
            line_color_focus: 0.72, 0.53, 0.04, 1
            text_color_normal:0,0,0,1
            text_color_focus:0,0,0,1
            cursor_color:0,0,0,1

        MDRaisedButton:
            text: 'Já tem conta! Conecte-se'
            pos_hint: {'center_x': 0.5, 'center_y': 0.15}
            size_hint_x: 0.06
            size_hint_y: 0.06
            md_bg_color: 0, 0, 0, 0
            font_size: "12sp"
            #on_release: app.irLoginProfissional()

        MDRaisedButton:
            text: 'Cadastrar'
            pos_hint: {'center_x': 0.5, 'center_y': 0.2}
            size_hint_x: 0.06
            size_hint_y: 0.06
            md_bg_color: 0.0, 0.4, 0.0, 1
            font_size: "18sp"
            bold: True
            line_color: 1, 1, 1,
            on_release: app.CadatrarProfissionais_Click()


<TelaPerfilProfissional@MDScreen>:
    MDFloatLayout:
        #fundo da tela
        canvas.before:
            # Desenha o fundo
            Color:
                rgba: 1, 1, 1, 1
            Rectangle:
                source: 'Imagens/Fundo.png'
                size: self.size
                pos: self.pos

        # container do perfil
        FloatLayout:
            size_hint: 0.35, 0.8
            pos_hint: {"center_x": 0.2, "center_y": 0.45}  # posição relativa à tela

            canvas.before:
                Color:
                    rgba: 0, 0, 0, 0.5
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [20]

            # imagem de perfil
            Image:
                id:PerfilImagem
                source: 'Imagens/FotoPerfil.png'
                size_hint: None, None
                size: dp(150), dp(150)
                pos_hint: {"center_x": 0.5, "center_y": 0.8}  # centraliza dentro do container

            AnchorLayout:
                anchor_x: "center"
                anchor_y: "center"
                size_hint: 1, None
                height: dp(30)  # altura fixa
                pos_hint: {"center_x": 0.5, "center_y": 0.62}

                MDLabel:
                    id: lbl_UsuarioPerfil
                    text: "Allyson Souza da Silva"
                    halign: "center"
                    valign: "middle"
                    size_hint: None, None
                    size: self.texture_size
                    text_size: None, None
                    font_size: "18sp"
                    bold: True
                    color: 1, 1, 1, 1

            MDLabel:
                id:lbl_CPFPerfil
                text: "CPF:"
                valign: "middle"
                size_hint: None, None
                size_hint_x: 0.3
                pos_hint: {"center_x": 0.25, "center_y": 0.54}
                font_size: "18sp"
                bold: True
                color:1,1,1,1

            MDLabel:
                id:lbl_NomePerfil
                text: "Nome:"
                valign: "middle"
                size_hint: None, None
                size_hint_x: 0.3
                pos_hint: {"center_x": 0.25, "center_y": 0.48}
                font_size: "18sp"
                bold: True
                color:1,1,1,1

            MDLabel:
                id:lbl_ProfissaoPerfil
                text: "Profissão:"
                valign: "middle"
                size_hint: None, None
                size_hint_x: 0.3
                pos_hint: {"center_x": 0.25, "center_y": 0.42}
                font_size: "18sp"
                bold: True
                color:1,1,1,1

            MDLabel:
                id:lbl_BiografiaPerfil
                text: "Biografia:"
                valign: "middle"
                size_hint: None, None
                size_hint_x: 0.3
                pos_hint: {"center_x": 0.25, "center_y": 0.38}
                font_size: "18sp"
                bold: True
                color:1,1,1,1

            MDRaisedButton:
                text: 'Alterar Perfil'
                pos_hint: {'center_x': 0.5, 'center_y': 0.2}
                size_hint_x: 0.06
                size_hint_y: 0.06
                md_bg_color: 0.0, 0.0, 0.0, 0
                font_size: "18sp"
                bold: True
                line_color: 1, 1, 1,
                on_release: app.CadatrarProfissionais_Click()

        MDFloatLayout:
            canvas:
                # Desenha o logo
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    source: 'Imagens/Logo.png'
                    size: 100, 100
                    pos: self.center_x - self.width * 0.48, self.center_y - self.height * -0.36

            MDTextButton:
                text: "Perfil"
                theme_text_color: "Custom"
                text_color: 1, 1, 1, 1
                on_release: app.label_clicado()
                font_size: "18sp"
                bold: True
                pos_hint: {'center_x': 0.5, 'center_y': 0.92}

            MDTextButton:
                text: "Alunos"
                theme_text_color: "Custom"
                text_color: 1, 1, 1, 1
                on_release: app.label_clicado()
                font_size: "18sp"
                bold: True
                pos_hint: {'center_x': 0.55, 'center_y': 0.92}

            MDTextButton:
                text: "Jogos"
                theme_text_color: "Custom"
                text_color: 1, 1, 1, 1
                on_release: app.label_clicado()
                font_size: "18sp"
                bold: True
                pos_hint: {'center_x': 0.6, 'center_y': 0.92}

            MDTextButton:
                text: "Comunidade"
                theme_text_color: "Custom"
                text_color: 1, 1, 1, 1
                on_release: app.label_clicado()
                font_size: "18sp"
                bold: True
                pos_hint: {'center_x': 0.665, 'center_y': 0.92}

            MDIconButton:
                icon: "star"
                text:"Favoritos"
                pos_hint: {"center_x": 0.9, "center_y": 0.85}
                user_font_size: "60sp"
                theme_text_color: "Custom"
                text_color: 1, 1, 0, 1
                on_release: app.on_star_press()

        BoxLayout:
            size_hint: 0.5, 0.8
            pos_hint: {"center_x": 0.70, "center_y": 0.30}  # posição relativa à tela

            ScrollView:
                do_scroll_x: False
                do_scroll_y: True

                MDBoxLayout:
                    id: conteudo_scroll
                    orientation: "vertical"
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(10)
                    padding: dp(10)
                    GridLayout:
                        id: datagrid
                        cols: 3
                        size_hint_y: None
                        height: self.minimum_height
                        row_default_height: dp(40)
                        spacing: dp(5)
                        padding: dp(5)

//main.py
from kivy.lang import Builder
from kivymd.app import MDApp
from kivymd.uix.fitimage import FitImage
from kivymd.uix.label import MDLabel
from Controllers.ProfissionaisLoginController import LoginController
from Controllers.ProfissionaisController import ProfissionaisControler
from kivymd.uix.menu import MDDropdownMenu
from Banco import Banco
from Helpers.Requerimentos import Escolas,Perfis,Posts
from Helpers import Requerimentos
from kivy.clock import Clock
from Controllers.ProfissionaisController import ProfissionaisControler
import base64


class MyApp(MDApp):
    def build(self):
        return Builder.load_file("Views/Front.kv")
    #quando iniciar
    def on_start(self):
        if self.root:
            print("ScreenManager inicializado com sucesso!")
    #tela escolha
    def irLoginAluno(self):
        if self.root:
            self.root.current = "LoginAluno"

    def irEscolha(self):
        if self.root:
            self.root.current = "Escolha"

    def irLoginProfissional(self):
        if self.root:
            self.root.current = "LoginProfissional"

    #tela LoginProfissional
    def irCadastroProfissional1(self):
        if self.root:
            self.root.current = "CadastroProfissional1"

    def LoginProfissionais_Click(self):
        PC = ProfissionaisControler(self.root)
        Sessao = LoginController(self.root)
        if self.root:
            self.controle = LoginController(self.root)
            if self.controle.Sessao():
                PostView = self.root.get_screen("PerfilProfissional").ids.datagrid
                DadosPerfil = self.root.get_screen("PerfilProfissional").ids
                '''
                    Posts = Posts.GetPorUsuario()
                imagens = [
                    {
                        'imagem': Post[Post][3]
                    }for Post in Posts
                ]
                '''
                FotoPerfil = ClassePerfis.GetPorUsuario(Sessao.usuario)
                print(FotoPerfil)
                self.Profissional = PC.CarregarUsuario(f"USUARIO ='{Sessao.usuario}'")
                if FotoPerfil == None:
                    img_bytes = base64.b64decode(ClassePerfis.GetPorUsuario('padrao')['imagem'])
                    print(img_bytes)
                else:
                    img_bytes = base64.b64decode(FotoPerfil['imagem'])

                with open("Imagens/FotoPerfil.png", "wb") as f:
                    f.write(img_bytes)
                DadosPerfil['lbl_UsuarioPerfil'].text = '@'+self.Profissional[0][2]
                DadosPerfil['lbl_CPFPerfil'].text = f"CPF:{self.Profissional[0][0]}"
                DadosPerfil['lbl_NomePerfil'].text = f"Nome:{self.Profissional[0][1]}"
                DadosPerfil['lbl_ProfissaoPerfil'].text = f"Profissão:{self.Profissional[0][3]}"
                if not DadosPerfil['lbl_BiografiaPerfil'].text:
                    DadosPerfil['lbl_BiografiaPerfil'].text = f"Biografia:Conte mais sobre você"
                else:
                    DadosPerfil['lbl_BiografiaPerfil'].text = f"Biografia:{self.Profissional[0][9]}"
                '''
                for imagem, legenda in dados:
                    # 1ª linha: imagem
                    PostView.add_widget(
                        FitImage(
                            source=imagem,
                            size_hint_y=None,
                            height=100
                        )
                    )

                    # 2ª linha: legenda
                    PostView.add_widget(
                        MDLabel(
                            text=legenda,
                            halign="center",
                            size_hint_y=None,
                            height=40
                        )
                    )
                '''
                self.root.current = "PerfilProfissional"
        else:
            print("root ainda não existe")

    #tela CadastroProfissional1
    def ListaProfissõesText_Click(self, item, ativa):
        if ativa:
            menu_items = self.AddItensProfissoes(Banco.consultar('NOME','PROFISSOES','1'))
            MDDropdownMenu(caller=item, items=menu_items).open()
        else:
            print('erro')


    def ListaProfissõesBotao_Click(self, item):
        try:
            menu_items = self.AddItensProfissoes(Banco.consultar('NOME','PROFISSOES','1'))
            MDDropdownMenu(caller=item, items=menu_items).open()
        except Exception as e:
            print(e)

    def ListaProfissoesItens_Click(self, text_item):
        self.root.get_screen("CadastroProfissional1").ids.List_ProfissoesText.text = text_item

    def AddItensProfissoes(self, itens):
        menu_items = [
            {
                "text": f"{item[0].translate(str.maketrans("", "", "(),'"))}",
                "on_release": lambda x=f"{item[0].translate(str.maketrans("", "", "(),'"))}": self.ListaProfissoesItens_Click(x),
            } for item in itens
        ]
        return menu_items

    def irCadastroProfissional2(self):
        if self.root:
            self.root.current = "CadastroProfissional2"

    #tela CadastroProfissionais2
    def ListaUFText_Click(self,item, ativa):
        if ativa:
            self.itens = [
                            'AC',
                            'AL',
                            'AP',
                            'AM',
                            'BA',
                            'CE',
                            'DF',
                            'ES',
                            'GO',
                            'MA',
                            'MS',
                            'MT',
                            'MG',
                            'PA',
                            'PB',
                            'PR',
                            'PE',
                            'PI',
                            'RJ',
                            'RN',
                            'RS',
                            'RO',
                            'RR',
                            'SC',
                            'SP',
                            'SE',
                            'TO',
                        ]
            menu_items = [
                {
                "text":f'{index}',
                "on_release": lambda x=f'{index}': self.ListaUFItens_Click(x)
                }for index in self.itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        else:
            print('err')

    def ListaUFBotao_Click(self, item):
        try:
            menu_items = [
                {
                    "text": f'{index}',
                    "on_release": lambda x=f'{index}': self.ListaUFItens_Click(x)
                } for index in self.itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        except Exception as e:
            print(e)

    def ListaUFItens_Click(self, text_item):
        self.root.get_screen("CadastroProfissional2").ids.List_UFText.text = text_item

    def ListaCidadesText_Click(self,item, ativa):
        if ativa:
            itens = Requerimentos.get_cidades_por_uf(self.root.get_screen("CadastroProfissional2").ids.List_UFText.text)
            menu_items = [
                {
                "text":f'{index}',
                "on_release": lambda x=f'{index}': self.ListaCidadesItens_Click(x)
                }for index in itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        else:
            print('erro')

    def ListaCidadesBotao_Click(self, item):
        try:
            itens = Requerimentos.get_cidades_por_uf(self.root.get_screen("CadastroProfissional2").ids.List_UFText.text)
            menu_items = [
                {
                    "text": f'{index}',
                    "on_release": lambda x=f'{index}': self.ListaCidadesItens_Click(x)
                } for index in itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        except Exception as e:
            print(e)

    def ListaCidadesItens_Click(self, text_item):
        self.root.get_screen("CadastroProfissional2").ids.List_CidadesText.text = text_item

    def ListaEscolasBotao_Click(self, item):
        try:
            itens = Requerimentos.get_escolas(self.root.get_screen("CadastroProfissional2").ids.List_UFText.text,self.root.get_screen("CadastroProfissional2").ids.List_CidadesText.text,'BaseInterna//microdados_ed_basica_2024.csv')
            menu_items = [
                {
                    "text": f'{index}',
                    "on_release": lambda x=f'{index}': self.ListaEscolasBotao_Click(x)
                } for index in itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        except Exception as e:
            print(e)


    def ListaEscolasText_Click(self,item, ativa):
        if ativa:
            itens = Requerimentos.get_escolas(self.root.get_screen("CadastroProfissional2").ids.List_UFText.text,self.root.get_screen("CadastroProfissional2").ids.List_CidadesText.text,'BaseInterna//microdados_ed_basica_2024.csv')
            menu_items = [
                {
                "text":f'{index}',
                "on_release": lambda x=f'{index}': self.ListaEscolasBotao_Click(x)
                }for index in itens
            ]

            MDDropdownMenu(caller=item, items=menu_items).open()
        else:
            print('erro')

    def ListaEscolasBotao_Click(self, text_item):
        self.root.get_screen("CadastroProfissional2").ids.List_EscolasText.text = text_item

    def formatar_cpf(self, instance):
        puro = "".join(ch for ch in instance.text if ch.isdigit())
        puro = puro[:11]

        novo = ""
        for i, d in enumerate(puro):
            novo += d
            if i == 2 or i == 5:
                if len(puro) > i + 1:
                    novo += '.'
            if i == 8:
                if len(puro) > i + 1:
                    novo += '-'
        if instance.text != novo:
            instance.text = novo
            Clock.schedule_once(lambda dt: self.mover_cursor(instance))

    def mover_cursor(self, instance):
        instance.do_cursor_movement('cursor_end')

    def CadatrarProfissionais_Click(self):
        if self.root:
            self.controle = ProfissionaisControler(self.root)
            if self.controle.Cadastar():
                self.root.current = "LoginProfissional"
        else:
            print("root ainda não existe")

ClassePerfis = Perfis()
MyApp().run()